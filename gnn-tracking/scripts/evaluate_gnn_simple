#!/usr/bin/env python                                                                                                             
import networkx as nx
import numpy as np

from graph_nets import utils_np, utils_tf

from heptrkx import load_yaml
from heptrkx.nx_graph import utils_plot, utils_data, utils_train, prepare, utils_test
from heptrkx.postprocess import wrangler, analysis, inference
from heptrkx import master

import os
import glob
import argparse
import sys

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='evalute GNN models')
    add_arg = parser.add_argument
    add_arg('config', help='configuration file for training')
    add_arg('evtid', type=int, help='event ID')
    add_arg('--iteration',  type=int, default=-1)
    add_arg('--ckpt', default=None)

    args = parser.parse_args()
    evtid = args.evtid
    iteration = args.iteration
    input_ckpt = args.ckpt

    from heptrkx.postprocess.evaluate_tf import create_evaluator

    config_file = args.config
    config = load_yaml(config_file)
    file_dir = config['make_graph']['out_graph']
    hits_graph_dir = config['data']['input_hitsgraph_dir']
    trk_dir = config['track_ml']['dir']
    if input_ckpt is None:
        input_ckpt = os.path.join(config['segment_training']['output_dir'],
                                  config['segment_training']['prod_name'])

    file_names = [os.path.join(file_dir, "event000001000_g000000000_INPUT.npz")]
    true_features = ['pt', 'particle_id', 'nhits']
    batch_size = 1

    n_batches = 1

    event = master.Event(trk_dir, evtid)
    hits = event.hits
    truth = event.truth
    model, model_c, sess = create_evaluator(config_file, iteration, input_ckpt)

    all_graphs = []
    is_digraph = True
    is_bidirection = False
    # evaluate each graph                                                                                                        

    input_graphs = []
    target_graphs = []
    file_name = file_names[0]
    with np.load(file_name) as f:
        input_graphs.append(dict(f.items()))

    with np.load(file_name.replace("INPUT", "TARGET")) as f:
        target_graphs.append(dict(f.items()))

    graphs = model(utils_np.data_dicts_to_graphs_tuple(input_graphs),
                   utils_np.data_dicts_to_graphs_tuple(target_graphs),
                   use_digraph=is_digraph, bidirection=is_bidirection)

    I = input_graphs[0]
    G = graphs[0]

    nodes = I['nodes']
    edges = I['edges']
    receivers = I['receivers']
    senders = I['senders']
    globs = I['globals']

    predict = np.array([G.edges[edge]['predict'][0] for edge in G.edges()])

    print('input node features:')
    print(' shape:', nodes.shape)
    print(' values:', nodes)
    print()
    print('input edge features:')
    print(' shape:', edges.shape)
    print(' values:', edges)
    print()
    print('input global features:')
    print(' shape:', globs.shape)
    print(' values:', globs)
    print()
    print('input receivers:')
    print(' shape:', receivers.shape)
    print(' values:', receivers)
    print()
    print('input senders:')
    print(' shape:', senders.shape)
    print(' values:', senders)
    print()
    print('predicted edge weights:')
    print(' shape:', predict.shape)
    print(' values:', predict)

    core_edge_weights = []
    core_edge_biases = []
    core_node_weights = []
    core_node_biases = []
    for layer in model_c._core._edge_block._edge_model._layers:
        for sublayer in layer._layers:
            core_edge_weights.append(sublayer._w.eval(session=sess))
            core_edge_biases.append(sublayer._b.eval(session=sess))
    for layer in model_c._core._node_block._node_model._layers:
        for sublayer in layer._layers:
            core_node_weights.append(sublayer._w.eval(session=sess))
            core_node_biases.append(sublayer._b.eval(session=sess))

    encoder_edge_biases = []
    encoder_edge_weights = []
    encoder_node_biases = []
    encoder_node_weights = []
    decoder_edge_biases = []
    decoder_edge_weights = []
    decoder_node_biases = []
    decoder_node_weights = []
    output_edge_biases = []
    output_edge_weights = []
    for v in model_c._encoder._network._edge_model.trainable_variables:
        if 'b:0' in v.name:
            encoder_edge_biases.append(v.eval(session=sess))
        elif 'w:0' in v.name:
            encoder_edge_weights.append(v.eval(session=sess))
    for v in model_c._encoder._network._node_model.trainable_variables:
        if 'b:0' in v.name:
            encoder_node_biases.append(v.eval(session=sess))
        elif 'w:0' in v.name:
            encoder_node_weights.append(v.eval(session=sess))
    for v in model_c._decoder._edge_model.trainable_variables:
        if 'b:0' in v.name:
            decoder_edge_biases.append(v.eval(session=sess))
        elif 'w:0' in v.name:
            decoder_edge_weights.append(v.eval(session=sess))
    for v in model_c._output_transform._edge_model.trainable_variables:
        if 'b:0' in v.name:
            output_edge_biases.append(v.eval(session=sess))
        elif 'w:0' in v.name:
            output_edge_weights.append(v.eval(session=sess))

    print()
    print('model:')
    print()

    for i, (w, b) in enumerate(zip(encoder_node_weights, encoder_node_biases)):
        print('encoder node weights layer {}:'.format(i))
        print(' shape:', w.shape)
        print(' values:', w)
        print()
        print('encoder node biases layer {}:'.format(i))
        print(' shape:', b.shape)
        print(' values:', b)
        print()

    for i, (w, b) in enumerate(zip(encoder_edge_weights, encoder_edge_biases)):
        print('encoder edge weights layer {}:'.format(i))
        print(' shape:', w.shape)
        print(' values:', w)
        print()
        print('encoder edge biases layer {}:'.format(i))
        print(' shape:', b.shape)
        print(' values:', b)
        print()

    for i, (w, b) in enumerate(zip(core_edge_weights, core_edge_biases)):
        print('core edge weights layer {}:'.format(i))
        print(' shape:', w.shape)
        print(' values:', w)
        print()
        print('core edge biases layer {}:'.format(i))
        print(' shape:', b.shape)
        print(' values:', b)
        print()

    for i, (w, b) in enumerate(zip(core_node_weights, core_node_biases)):
        print('core node weights layer {}:'.format(i))
        print(' shape:', w.shape)
        print(' values:', w)
        print()
        print('core node biases layer {}:'.format(i))
        print(' shape:', b.shape)
        print(' values:', b)
        print()

    for i, (w, b) in enumerate(zip(decoder_edge_weights, decoder_edge_biases)):
        print('decoder edge weights layer {}:'.format(i))
        print(' shape:', w.shape)
        print(' values:', w)
        print()
        print('decoder edge biases layer {}:'.format(i))
        print(' shape:', b.shape)
        print(' values:', b)
        print()

    for i, (w, b) in enumerate(zip(output_edge_weights, output_edge_biases)):
        print('output edge weights layer {}:'.format(i))
        print(' shape:', w.shape)
        print(' values:', w)
        print()
        print('output edge biases layer {}:'.format(i))
        print(' shape:', b.shape)
        print(' values:', b)
        print()



    print('evaulate by hand:')

    print('input nodes shape:', nodes.shape)

    n = nodes.dot(encoder_node_weights[0])
    n += encoder_node_biases[0]
    n = n.dot(encoder_node_weights[1])
    n += encoder_node_biases[1]

    print('nodes shape after encoder:', n.shape)

    print('inpurt edges shape:', edges.shape)

    e = edges.dot(encoder_edge_weights[0])
    e += encoder_edge_biases[0]
    e = e.dot(encoder_edge_weights[1])
    e += encoder_edge_biases[1]

    print('edges shape after encoder:', e.shape)

